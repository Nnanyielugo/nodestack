# docker built in resolver to resolve upstreams
# super short ttl to prevent stale records when scaling up/down
resolver 127.0.0.11 ipv6=off valid=1s;

server {
    server_tokens off;

    listen 80 default_server;
    listen 443 ssl default_server;

    server_name lb.nodestack.local;

    ssl_certificate /etc/nginx/tls/server.crt;
    ssl_certificate_key /etc/nginx/tls/server.key;

    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;

    ssl_protocols TLSv1.2 TLSv1.1 TLSv1;
    ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';
    ssl_prefer_server_ciphers on;

    # TODO: should use https to talk to backends
    set $mybackend "https://node.nodestack.local:3000";

    location / {
        # using a variable here will force DNS re-resolution but we can't use upstream
        proxy_pass $mybackend;
        proxy_connect_timeout 5s;

        # for SSL client auth, just reuse server cert (same CA)
        proxy_ssl_certificate         /etc/nginx/tls/server.crt;
        proxy_ssl_certificate_key     /etc/nginx/tls/server.key;

        # verify upstream
        proxy_ssl_verify on;
        proxy_ssl_trusted_certificate /etc/nginx/tls/ca.crt;
        proxy_ssl_verify_depth 2;
        proxy_ssl_session_reuse on;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Request-Uri $request_uri;
    }
}
